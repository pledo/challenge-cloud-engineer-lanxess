name: test
on:
  push:
    branches: ['feat/repo-setup']
env:
  DOCKER_REGISTRY: pledo
  IMAGE_NAME: springboot-sample
  SERVICE: comments
  REGISTRY: comments
  SERVER: https://argocd.example.com
  REPOSITORY: https://argocd.example.com
  ENVIRONMENT: test
  ARGOCD_APPS_BRANCH: 'feat/repo-setup'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      sha-short: ${{ steps.output.outputs.sha_short}}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set outputs
        id: output
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check outputs
        run: echo ${{ steps.output.outputs.sha_short }}

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: spring-postgres/backend/
          file: spring-postgres/backend/Dockerfile
          push: true
          tags: ${{ steps.output.outputs.sha_short }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
      #- name: Login to Amazon ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v2
      #- name: Build, tag, and push docker image to Amazon ECR
      #  env:
      #    REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #    REPOSITORY: my-ecr-repo
      #    IMAGE_TAG: ${{ github.sha }}
      #  run: |
      #    docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #    docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  #deploy:
  #  name: Deploy
  #  runs-on: ubuntu-latest
  #  needs: build
  #  steps:     
  #    - name: Listing files
  #      run: |
  #        echo -e "\n#### SHA: ${{ needs.build.outputs.sha-short }}"
  #        cd argocd/overlays/${{ env.ENVIRONMENT }}
  #        kustomize edit set image ${{ env.SERVER }}/${{ env.SERVICE }}:${{needs.build.outputs.sha-short}}
  #        cat kustomization.yaml
  #        git config --local user.email "github-actions@github.com"
  #        git config --local user.name "GitHub Actions"
  #        git add kustomization.yaml
  #        git commit -m "bump ${{ env.ENVIRONMENT }} env image"
  #    - name: Push changes
  #      uses: ad-m/github-push-action@master
  #      with:
  #        ssh: true
  #        branch: ${{ env.ARGOCD_APPS_BRANCH }}
  #        directory: gitops
  #        repository: compay/comments
